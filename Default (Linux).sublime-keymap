[

  // Chris' "emacs refugee" Sublime Text 2 key mappings. Depends on Wrap Plus
  // packages, plus a custom pdb.set_trace snippet named
  // set_trace.sublime-snippet.  It outs me as someone who uses cursor keys
  // instead of ctrl-key movement commands; try not to judge.  Most stuff
  // initially cadged from sublemacspro, but I don't actually use sublemacspro
  // anymore, i just copied its .py files into User (it was too hard to keep
  // overriding its keybindings).

  // My Emacs style

  { "keys": ["ctrl+a"], "command": "move_to", 
    "args": {"to": "bol", "extend": false} },
  { "keys": ["ctrl+e"], "command": "move_to", 
    "args": {"to": "eol", "extend": false} },
  { "keys": ["ctrl+backspace"], "command": "delete_word", 
    "args": { "forward": false } },
  { "keys": ["alt+backspace"], "command": "delete_word", 
    "args": { "forward": false } },
  { "keys": ["super+backspace"], "command": "delete_word",
    "args": { "forward": false } },
  { "keys": ["alt+shift+,"], "command": "move_to",
    "args": {"to": "bof", "extend": false}},
  { "keys": ["alt+shift+."], "command": "move_to", 
    "args": {"to": "eof", "extend": false}},
  { "keys": ["ctrl+l"], "command": "sbp_recenter_in_view" },
  { "keys": ["ctrl+x","h"], "command": "select_all"},
  { "keys": ["ctrl+x", "d"], "command": "show_overlay", 
    "args": {"overlay": "goto", "show_files": true} },
  { "keys": ["ctrl+x", "s"], "command": "toggle_side_bar" },
  { "keys": ["ctrl+x", "r", "k"], "command": "sbp_rectangle_delete" },
  { "keys": ["ctrl+x", "r", "i"], "command": "sbp_rectangle_insert" },
  { "keys": ["alt+y"], "command": "sbp_yank_choice" },
  { "keys": ["ctrl+x", "u"], "command": "undo" },
  { "keys": ["ctrl+c", ">"], "command": "indent" },
  { "keys": ["ctrl+c", "<"], "command": "unindent" },
  { "keys": ["alt+g"], "command": "show_overlay", 
    "args": {"overlay": "goto", "text": ":"} },
  { "keys": ["ctrl+9"], "command": "toggle_record_macro" },
  { "keys": ["ctrl+0"], "command": "toggle_record_macro" },
  { "keys": ["ctrl+x", "e"], "command": "run_macro" },
  { "keys": ["alt+;"], "command": "toggle_comment" },
  { "keys": ["ctrl+x", "k"], "command": "close" },
  { "keys": ["ctrl+x", "ctrl+c"], "command": "exit"},
  { "keys": ["ctrl+x", "ctrl+s"], "command": "save"},
  { "keys": ["ctrl+alt+x"], "command": "emacs_reindent" },

  // "bol"/"eol" goes to a logical begin/end of line; we want it to go to true
  // line begin/end, so we use hardbol/hardeol instead for ctrl-a and ctrl-e

  { "keys": ["ctrl+a"], "command": "move_to", 
    "args": {"to": "hardbol", "extend": false} },
  { "keys": ["ctrl+e"], "command": "move_to",
    "args": {"to": "hardeol", "extend": false} },

  // map things that are generally ctrl-shift to ctrl-alt
  { "keys": ["ctrl+alt+a"], "command": "expand_selection", 
    "args": {"to": "tag"} },
  { "keys": ["ctrl+alt+space"], "command": "expand_selection", 
    "args": {"to": "scope"} },
  { "keys": ["ctrl+alt+m"], "command": "expand_selection", 
    "args": {"to": "brackets"} },
  { "keys": ["ctrl+alt+j"], "command": "expand_selection", 
    "args": {"to": "indentation"} },
  { "keys": ["ctrl+alt+p"], "command": "expand_selection_to_paragraph" },
  { "keys": ["ctrl+alt+;"], "command": "expand_selection", 
    "args": {"to": "line"} },

  // map things that are generally alt-shift to ctrl-alt
  { "keys": ["ctrl-alt+w"], "command": "insert_snippet", 
    "args": { "name": "Packages/XML/long-tag.sublime-snippet" } },

  // We don't want tab to commit completions because it also reindents, and
  // enter is annoying, because sometimes the autocompletes commits when you
  // really want a newline, so use ctrl-enter to commit completions

  { "keys": ["ctrl+enter"], "command": "commit_completion", "context":
      [
          { "key": "auto_complete_visible" }
      ]
  },

  { "keys": ["ctrl+enter"], "command": "insert_best_completion", 
    "args": {"default": "\t", "exact": true} },
  { "keys": ["ctrl+enter"], "command": "insert_best_completion", 
    "args": {"default": "\t", "exact": false},
        "context":
        [
        { "key": "setting.tab_completion", "operator": "equal", "operand": true }
        ]
    },

    { "keys": ["ctrl+enter"], "command": "replace_completion_with_next_completion", "context":
        [
            { "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },
            { "key": "setting.tab_completion", "operator": "equal", "operand": true }
        ]
    },

    { "keys": ["tab"], "command": "reindent", "context":
        [
            { "key": "setting.auto_indent", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_match", "operand": "^$", "match_all": true },
            { "key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": true }
        ]
    },

  // Cause tab to reindent in general

  { "keys": ["tab"], "command": "reindent"},
  { "keys": ["ctrl+tab"], "command": "indent"},
  { "keys": ["shift+tab"], "command": "unindent"},

  { "keys": ["tab"], "command": "next_field", "context":
      [
        { "key": "has_next_field", "operator": "equal", "operand": true }
      ]
  },
  { "keys": ["tab"], "command": "commit_completion", "context":
      [
          { "key": "auto_complete_visible" },
          { "key": "setting.auto_complete_commit_on_tab" }
      ]
  },

  // Use Wrap Plus version of wrap_lines: it does a better job of wrapping
  // Python docstrings than either sublemacs "sbp_wrap_paragraph" or
  // sublime's "wrap_lines"

  { "keys": ["escape", "q"], "command": "wrap_lines_plus" }, 
  { "keys": ["alt+q"], "command": "wrap_lines_plus" },

  // Remap some useful sublime functionality lost to emacsy keybindings

  { "keys": ["ctrl+shift+r"], "command": "show_overlay", 
      "args": {"overlay": "goto", "text": "@"} },
  
  // rebind skip-ctrl-d to something more sensible

  { "keys": ["ctrl+x", "ctrl+d"], "command": "find_under_expand_skip" },


  // Allow toggling of word wrap using alt+w

  {
      "keys": ["alt+w"],
      "command": "toggle_setting",
      "args":
      {
          "setting": "word_wrap"
      }
  },

  // Insert a pdb.set_trace() snippet when ctrl-t is pressed

  { 
      "keys": ["alt+t"],  
      "command": "insert_snippet", 
      "args": {"name": "Packages/User/Python/set_trace.sublime-snippet"} 
  },

  // Kill Ring handling

  { "keys": ["ctrl+k"], "command": "sbp_kill_line"},
  { "keys": ["alt+k"], "command": "sbp_kill_to_end_of_sentence"},
  { "keys": ["ctrl+y"], "command": "paste" },
  { "keys": ["ctrl+shift+y"], "command": "sbp_yank_choice" },
  { "keys": ["ctrl+space"], "command": "sbp_set_mark" },
  { "keys": ["ctrl+w"], "command": "sbp_delete_to_mark" },
  { "keys": ["super+c"], "command": "sbp_kill_ring_save" },
  { "keys": ["alt+w"], "command": "sbp_kill_ring_save" },
  { "keys": ["escape", "w"], "command": "sbp_kill_ring_save" },
  { "keys": ["ctrl+g"], "command": "sbp_cancel_mark" },

  // cancel mark on ctrl-space

  { "keys": ["ctrl+space"], "command": "sbp_cancel_mark", "context" :
    [
      { "key": "sbp_emacs_has_mark", "operator": "equal", "operand": true }
    ]
  },

  // Goto stuff

  { "keys": ["ctrl+x", "ctrl+f"], "command": "show_overlay", 
    "args": {"overlay": "goto", "show_files": true} },
  { "keys": ["ctrl+x", "b"], "command": "next_view" },
  { "keys": ["ctrl+x", "ctrl+b"], "command": "goto_open_file"},
  { "keys": ["ctrl+x", "o"], "command": "sbp_cycle_focus_group"},

  // Rectangles

  { "keys": ["ctrl+x", "r", "t"], "command": "sbp_rectangle_insert" },
  { "keys": ["ctrl+x", "r", "d"], "command": "sbp_rectangle_delete" },

  // Extend the circumstances under which ctrl-g behaves like escape,
  // so when you hit ctrl-g over and over again like a trained emacs monkey
  // it actually does something

  { "keys": ["ctrl+g"], "command": "single_selection", "context":
      [
          { "key": "num_selections", "operator": "not_equal", "operand": 1 }
      ]
  },
  { "keys": ["ctrl+g"], "command": "clear_fields", "context":
      [
          { "key": "has_next_field", "operator": "equal", "operand": true }
      ]
  },
  { "keys": ["ctrl+g"], "command": "clear_fields", "context":
      [
          { "key": "has_prev_field", "operator": "equal", "operand": true }
      ]
  },
  { "keys": ["ctrl+g"], "command": "hide_panel", "args": {"cancel": true},
      "context":
      [
          { "key": "panel_visible", "operator": "equal", "operand": true },
          {"key": "panel", "operand": "console", "operator":"not_equal"}
      ]
  },
  { "keys": ["ctrl+g"], "command": "hide_overlay", "context":
      [
          { "key": "overlay_visible", "operator": "equal", "operand": true }
      ]
  },
  { "keys": ["ctrl+g"], "command": "hide_auto_complete", "context":
      [
          { "key": "auto_complete_visible", "operator": 
            "equal", "operand": true }
      ]
  },
  
  // Layouts

  { "keys": ["ctrl+x", "5", "2"], "command": "new_window" },

  {
    "keys": ["ctrl+x", "2"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 1.0],
      "rows": [0.0, 0.5, 1.0],
      "cells": [[0, 0, 1, 1], [0, 1, 1, 2]]
    }
  },
  {
    "keys": ["ctrl+x", "1"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 1.0],
      "rows": [0.0, 1.0],
      "cells": [[0, 0, 1, 1]]
    }
  },
  {
    "keys": ["ctrl+x", "3"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 0.5, 1.0],
      "rows": [0.0, 1.0],
      "cells": [[0, 0, 1, 1], [1, 0, 2, 1]]
    }
  },

  // ctrl-s/ctrl-r behavior: Use find panel rather than incremental find panel
  // as incremental search panel doesn't retain last
  // search value.  
    
  { "keys": ["ctrl+s"], "command": "show_panel", 
    "args": {"panel": "find", "reverse":false} },
  { "keys": ["ctrl+r"], "command": "show_panel", 
    "args": {"panel": "find", "reverse":true} },

  { "keys": ["ctrl+s"], "command": "find_next",
    "context":
    [
      {"key": "panel", "operand": "find"},
      { "key": "panel_visible", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["ctrl+r"], "command": "find_prev",
    "context":
    [
      {"key": "panel", "operand": "find"},
      { "key": "panel_visible", "operator": "equal", "operand": true }
    ]
  },

  // We also try to make it so doing anything with cursor keys and
  // ctrl-a/ctrl-e will hide the find panel, but not completely succesfully:
  // in particular, down/up won't exit the find panel.

  { "keys": ["enter"], "command": "hide_panel",
    "context":
    [
      {"key": "panel", "operand": "find"},
      { "key": "panel_visible", "operator": "equal", "operand": true }
    ]
    },
  { "keys": ["ctrl+e"], "command": "hide_panel",
    "context":
    [
      {"key": "panel", "operand": "find"},
      { "key": "panel_visible", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["ctrl+a"], "command": "hide_panel",
    "context":
    [
      {"key": "panel", "operand": "find"},
      { "key": "panel_visible", "operator": "equal", "operand": true }
    ]
    },
  { "keys": ["right"], "command": "hide_panel",
    "context":
    [
      {"key": "panel", "operand": "find"},
      { "key": "panel_visible", "operator": "equal", "operand": true }
    ]
    },
  { "keys": ["left"], "command": "hide_panel",
    "context":
    [
      {"key": "panel", "operand": "find"},
      { "key": "panel_visible", "operator": "equal", "operand": true }
    ]
    },
// { "keys": ["down"], "command": "hide_panel",
//    "context":
//    [
//        {"key": "panel", "operand": "find"},
//        { "key": "panel_visible", "operator": "equal", "operand": true }
//    ]
//},
//{ "keys": ["up"], "command": "hide_panel",
//    "context":
//    [
//        {"key": "panel", "operand": "find"},
//        { "key": "panel_visible", "operator": "equal", "operand": true }
//    ]
//},

  // Mark selection when using cursor keys

  { "keys": ["right"], "command": "move",
      "args": {"by": "characters", "forward": true, "extend": true}, 
       "context": 
      [
      { "key":"sbp_emacs_has_mark", "operator": "equal", "operand": true }
      ]
  },

  { "keys": ["left"], "command": "move", 
      "args": {"by": "characters", "forward": false, "extend": true}, 
      "context":
      [
      { "key":"sbp_emacs_has_mark", "operator": "equal", "operand": true }
      ]
  },

  { "keys": ["ctrl+left"], "command": "move", 
      "args": {"by": "words", "forward": false, "extend": true}, 
      "context": 
      [
      { "key":"sbp_emacs_has_mark", "operator": "equal", "operand": true }
      ] 
  },

  { "keys": ["ctrl+right"], "command": "move", 
     "args": {"by": "word_ends", "forward": true, "extend": true},
     "context": 
      [
      { "key":"sbp_emacs_has_mark", "operator": "equal", "operand": true }
      ]
  },

  { "keys": ["down"], "command": "move", 
      "args": {"by": "lines", "forward": true, "extend": true}, 
      "context": 
      [
      { "key":"sbp_emacs_has_mark", "operator": "equal", "operand": true }
      ]
  },

  { "keys": ["up"], "command": "move", 
      "args": {"by": "lines", "forward": false, "extend": true},
      "context":
      [
      { "key":"sbp_emacs_has_mark", "operator": "equal", "operand": true }
      ]
  }

]
